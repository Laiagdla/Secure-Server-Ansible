- name: Default config for ufw
  become: true
  community.general.ufw:
    state: enabled
    logging: true
  notify: Restart ufw service

- name: UFW - default deny in
  become: true
  community.general.ufw:
    policy: deny
    direction: incoming
  notify: Restart ufw service

- name: UFW - default deny out
  become: true
  community.general.ufw:
    policy: deny
    direction: outgoing
  notify: Restart ufw service

- name: UFW - configure ssh rule
  become: true
  community.general.ufw:
    rule: limit
    direction: in
    to_port: "{{ ssh_port }}"
  notify: Restart ufw service

- name: Configure sshd
  become: true
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^#?MaxAuthTries'
    line: 'MaxAuthTries 10'
  notify: Restart sshd service

- name: UFW - allow outgoing ports
  become: true
  community.general.ufw:
    rule: allow
    direction: out
    to_port: "{{ item }}"
  with_items:
    - "53"
    - "123"
    - "80"
    - "443"
    - "{{ mail_port }}" # outgoing mail port
  notify: Restart ufw service

- name: Configure psad
  become: true
  ansible.builtin.lineinfile:
    dest: /etc/psad/psad.conf
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  loop:
    - { regexp: '^EMAIL_ADDRESSES', line: 'EMAIL_ADDRESSES {{ mail_to }};' }
    - { regexp: '^EXPECT_TCP_OPTIONS', line: 'EXPECT_TCP_OPTIONS Y;'}
    - { regexp: '^ENABLE_PSADWATCHD', line: 'ENABLE_PSADWATCHD Y;'}
    - { regexp: '^ENABLE_AUTO_IDS ', line: 'ENABLE_AUTO_IDS Y;'}
    - { regexp: '^ENABLE_AUTO_IDS_EMAILS', line: 'ENABLE_AUTO_IDS_EMAILS Y;'}
    - { regexp: '^AUTO_IDS_DANGER_LEVEL', line: 'AUTO_IDS_DANGER_LEVEL 3;'}
    - { regexp: '^HOSTNAME', line: 'HOSTNAME {{ ansible_hostname }};'}
    - { regexp: '^EMAIL_ALERT_DANGER_LEVEL', line: 'EMAIL_ALERT_DANGER_LEVEL 3;' }
    - { regexp: '^EMAIL_ALERT_INTERVAL', line: 'EMAIL_ALERT_INTERVAL 30m;' }
  notify: Restart psad service

- name: Add logging to ufw before.rules
  become: true
  ansible.builtin.blockinfile:
    dest: /etc/ufw/before.rules
    insertbefore: "COMMIT"
    marker: "# {mark} ANSIBLE MANAGED BLOCK"
    block: |
      # log all traffic so psad can analyze
      -A INPUT -j LOG --log-tcp-options --log-prefix "[IPTABLES] "
      -A FORWARD -j LOG --log-tcp-options --log-prefix "[IPTABLES] "
  notify: Restart ufw service

- name: Add logging to ufw before6.rules
  become: true
  ansible.builtin.blockinfile:
    dest: /etc/ufw/before6.rules
    insertbefore: "COMMIT"
    marker: "# {mark} ANSIBLE MANAGED BLOCK"
    block: |
      # log all traffic so psad can analyze
      -A INPUT -j LOG --log-tcp-options --log-prefix "[IPTABLES] "
      -A FORWARD -j LOG --log-tcp-options --log-prefix "[IPTABLES] "
  notify: Restart ufw service

- name: Update psad signatures
  become: true
  register: psad
  ansible.builtin.shell: |
    psad --sig-update
  changed_when: psad.rc != 0 # <- Uses the return code to define when the task has changed.

- name: Configure fail2ban
  become: true
  ansible.builtin.blockinfile:
    path: /etc/fail2ban/jail.local
    owner: root
    group: root
    mode: '644'
    block: |
      [DEFAULT]
      # the IP address range we want to ignore
      ignoreip = 127.0.0.1/8

      # who to send e-mail to
      destemail = {{ mail_to }}

      # who is the email from
      sender = {{ mail_from }}

      # since we're using exim4 to send emails
      mta = mail

      # get email alerts
      action = %(action_mwl)s
    create: true
  notify: Restart fail2ban service

- name: Fail2ban - configure ssh jail
  become: true
  ansible.builtin.blockinfile:
    path: /etc/fail2ban/jail.d/ssh.local
    owner: root
    group: root
    mode: '644'
    block: |
      [sshd]
      enabled = true
      banaction = ufw
      port = {{ ssh_port }}
      filter = sshd
      logpath = %(sshd_log)s
      maxretry = 10
    create: true
  notify: Restart fail2ban service
